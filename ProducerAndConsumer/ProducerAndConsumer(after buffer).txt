// Author: Quan Nguyen
// References: stackoverflow, and with the help of Professor Landreth 

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h> 
#include <signal.h>
#include <sys/mman.h>

void ChildProcess(void);
void ParentProcess(void);

int i;
int* myDataBuffer;

/**
 * Main application entry point to spawn a child process provided argv[1] program argument.
 *
 * @return 1 if error or 0 if OK returned to code the caller.
 */

int main(int argc, char* argv[])
{
  pid_t pid;
  printf("Process ID in main() is: %i\n\n", getpid());

  myDataBuffer = (int*)mmap(0, sizeof(int), PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS, -1, 0);

  pid = fork();

  if (pid == -1) // Failed, no thread created
  {
    fprintf(stderr, "can't fork, error %d\n", errno);
    exit(EXIT_FAILURE);
  }
  else
  {
    if (pid == 0) // Child Process
    {
      ChildProcess();
    }
    else // Parent Process
    {
      ParentProcess();
    }
  }
  return 0;
}
/**
 * Child process processing.
 *
 * @param a Not used.
 * @return Always null.
 */
void ChildProcess()
{
  printf("Process ID in ChildProcess() is: %i\n\n", getpid());
  for (*myDataBuffer = 0; *myDataBuffer < 100; ++(*myDataBuffer))
  {
  printf("Child wrote: %d\n", *myDataBuffer); 
  }
  return;
}
/**
 * Parent process processing.
 *
 * @param a Not used.
 * @return Always null.
 */
void ParentProcess()
{
  printf("Process ID in ParentProcess() is: %i\n\n", getpid());
  for (int j= 0; j < 100; ++j)
  {
  printf("Consumer read %d\n", *myDataBuffer);
  }
  return;
}

